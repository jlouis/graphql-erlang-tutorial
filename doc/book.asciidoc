= {project} Tutorial
Jesper Louis Andersen <https://github.com/jlouis[@jlouis]>; Martin Gausby <https://github.com/gausby[@gausby]>; ShopGun <https://github.com/shopgun[@shopgun]>
May 2017
:toc: left
:icons: font
:source-highlighter: prettify
:sw_core: ../apps/sw_core
:sw_web: ../apps/sw_web
:project: Erlang GraphQL
:relay: Relay Modern
:shopgun: ShopGun
:cowboy-version: 1.1.x
:port-number: 17290
:imagesdir: ./images

{project} Tutorial

The guide here is a running example of an API implemented in Erlang
through the ShopGun GraphQL engine. The API is a frontend to a
database, containing information about the Star Wars films by George
Lucas. The intent is to provide readers with enough information they
can go build their own GraphQL servers in Erlang.

We use the GraphQL system at https://shopgun.com as a data backend. We
sponsor this tutorial as part of our Open Source efforts. We developed
this GraphQL system to meet our demands as our system evolves. The
world of tracking businesses and offers is a highly heterogeneous
dataset, which requires the flexibility of something like GraphQL.

Because GraphQL provides a lot of great tooling, we decided to move
forward and implement a server backend for Erlang, which didn't exist
at the time.

At the same time, we recognize other people may be interested in the
system and its development. Hence the decision was made to open source
the GraphQL parts of the system.

include::introduction.asciidoc[Introduction]
include::why_graphql.asciidoc[Why GraphQL]
include::system_tour.asciidoc[System Tour]
include::getting_started.asciidoc[Getting Started]
include::schema.asciidoc[Schema]
include::scalar_resolution.asciidoc[Scalar Resolution]
include::type_resolution.asciidoc[Type Resolution]
include::object_resolution.asciidoc[Object Resolution]
include::transports.asciidoc[Transports]
include::graphiql.asciidoc[GraphiQL]
include::errors.asciidoc[Error Handling]
include::relay_modern.asciidoc[Relay Modern]
include::security.asciidoc[Security]

[[annotations]]
== Annotations

TBD

include::tricks.asciidoc[Tricks]

[appendix]
include::terms.asciidoc[Terms]

[appendix]
include::code.asciidoc[Code Overview]
[appendix]
[[changelog]]
== Changelog

June 5th, 2017:: Merged a set of typo fixes to the documentation by
  @benbro.

May 30th, 2017:: Documented a more complex mutation example,
  <<introducing-starships>>, which explains how to carry out more
  complex queries. Also added this as an example to the
  <<system-tour>>.

May 29th, 2017:: Moved <<cqrs>> into terminology so it can be
  referenced from other places in the document easily. Described
  <<schema-default-values>>. Described <<middleware-stacks>>. Made the
  first sweep on the documentation describing the notion of mutations.
  The <<system-tour>> now includes simple mutations as an example.

May 24th, 2017:: Described Scalar Coercion in more detail in
  <<scalar-resolution>>. Change the schema such that a *DateTime*
  scalar is used for the fields `created` and `edited` in all output
  objects. Then demonstrate how this is used to coerce values.
  
May 22nd, 2017:: Documented how to resolve array objects in
  <<resolving-lists>>.

