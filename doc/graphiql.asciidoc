[[graphiql]]
== GraphiQL

The ubiquitous front-end for GraphQL servers is a system called
GraphiQL, https://github.com/graphql/graphiql, which provides a nice
user interface for a GraphQL server. We use this system as the
front-end in the demo, whereas real applications will of course skip
this front-end and just call directly to the GraphQL backend.

Having a nice UI for a GraphQL server helps tremendously in
development however. The UI uses the _introspection_ features of
GraphQL which is built into {project}. It can thus request the
schema types from the server and use that information to present a
nice user interface.

We have already provided cowboy dispatchers for GraphiQL (see
<<cowboy-handler>>). The only thing we have to do is to build a
minified version of GraphiQL and place it in our `site/assets` folder
inside our `priv` directory in the application `sw_web`. We also
provide a default `index.html` to load when the root URL `/` is
requested.

Since we bind the GraphQL server to {port-number} by default, you
can access to the GraphiQL system by starting the release:

[source,bash]
----
$ make release
$ _build/default/rel/sw/bin/sw console
----

And once the system is up and running, you can access it on
http://localhost:{port-number}/ It will look like

[#img-graphiql]
.The Graphiql User Interface
image::graphiql.png[GraphiQL]

The GraphiQL User Interface provides a number of features for the
developer:

* The system provides documentation by clicking the `Docs` tab. The
  documentation is searchable and fully introspectable.
* The system provides auto-completion and guidance when developing
  queries. It uses the introspection features to figure out what can
  be written.

Let us run a simple example query in the interface. Since we have

[source]
----
Eshell V8.3  (abort with ^G)
(sw@127.0.0.1)1> base64:encode("Planet:3").
<<"UGxhbmV0OjM=">>
----

we can write a query for this particular planet:

[source,graphql]
----
query PlanetQuery {
    node(id: "UGxhbmV0OjM=") {
      ... on planet {
        id
        name
        climate
      }
  }
}
----

The GraphiQL interface is a nice development and debugging tool. We
keep it available for production as well in a security gating because
it is nice you can build a query on the fly if something is odd with a
data set.

Note that GraphiQL creates a very large URL containing the query
itself. This is also very useful as you can send queries between
people by pasting links. In a development setting, you can then talk
about a particular query which doesn't operate as expected.



